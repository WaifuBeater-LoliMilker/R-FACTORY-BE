// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using R_Factory_BE.Models;

namespace R_Factory_BE.Models.Context;

public partial class r_factoryContext : DbContext
{
    public r_factoryContext(DbContextOptions<r_factoryContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Communication> Communication { get; set; }

    public virtual DbSet<Communicationparam> Communicationparam { get; set; }

    public virtual DbSet<Communicationparamconfig> Communicationparamconfig { get; set; }

    public virtual DbSet<Device> Device { get; set; }

    public virtual DbSet<Deviceparameter> Deviceparameter { get; set; }

    public virtual DbSet<Deviceparameterlogs> Deviceparameterlogs { get; set; }

    public virtual DbSet<RefreshTokens> RefreshTokens { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Communication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("communication");

            entity.HasIndex(e => e.CommunicationName, "CommunicationName").IsUnique();

            entity.Property(e => e.CommunicationName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
        });

        modelBuilder.Entity<Communicationparam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("communicationparam");

            entity.Property(e => e.DataType).HasMaxLength(50);
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'1'");
            entity.Property(e => e.ParamKey)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Communicationparamconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("communicationparamconfig");

            entity.Property(e => e.ConfigValue)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Device>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("device");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.DeviceName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Deviceparameter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("deviceparameter");

            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ParamName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PollingInterval).HasDefaultValueSql("'5000'");
            entity.Property(e => e.Unit).HasMaxLength(20);
        });

        modelBuilder.Entity<Deviceparameterlogs>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("deviceparameterlogs");

            entity.Property(e => e.LogValue)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<RefreshTokens>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("refresh_tokens");

            entity.HasIndex(e => e.Token, "token_UNIQUE").IsUnique();

            entity.HasIndex(e => e.UserId, "user_id_UNIQUE").IsUnique();

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.IsRevoked).HasComment("0 = active, 1 = revoked (invalidated)");
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("users");

            entity.Property(e => e.Fullname).HasMaxLength(145);
            entity.Property(e => e.Password).HasMaxLength(145);
            entity.Property(e => e.Username).HasMaxLength(145);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}